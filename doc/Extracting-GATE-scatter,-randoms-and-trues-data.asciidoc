
:toc:

== Introduction

OMEGA allows the import of GATE scatter, randoms and trues data into MATLAB either in the raw list-mode format, as a sinogram or as a "true" image depicting the number of counts emanating from each coordinate (this is converted into same pixel resolution as the reconstructed image). All three components are stored separately along with the actual coincidence data. The import can be done either by using `gate_main_m` or `gate_main_simple.m`, with the latter only supporting OSEM reconstruction. If you need only the data import, `gate_main_simple.m` is recommended for better readability.

Randoms are supported by all three formats (ASCII, LMF and ROOT). LMF only supports Compton scattering in the phantom, while ASCII and ROOT support also Compton scattering in the detector, Rayleigh scattering in the phantom and Rayleigh scattering in the detector. You can select any one of these in gate_main.m (options.scatter_components). Trues will be selected from coincidences that originate from the same event and have not gone through any scattering (as indicated by the GATE output files).

NOTE: Using ROOT data, as mentioned in https://github.com/villekf/OMEGA/blob/master/README.md[readme], will cause MATLAB R2018b and EARLIER to crash during GUI activity. This can be prevented by using MATLAB in the -nojvm mode (i.e. `matlab -nojvm`), which means without any GUIs. It is recommended to use this only for data extraction (set `options.only_sinos = true` and run `gate_main_simple.m`). This issue is not present on Octave or MATLAB R2019a and up. ROOT is not supported on Windows on either MATLAB or Octave. 

Extracting the trues, randoms and/or scatter has no effect on the actual coincidences. I.e. they will also be extracted same regardless if any of the trues, randoms or scatter is extracted.

All coincidences that are from different events (i.e. not from the same annihilation) will be considered as randoms. All coincidences that come from the same event but have scattered in at least one of the four possibilities are considered scatter. All coincidences that originate from the same event but have not scattered are considered as trues. If a prompt has scattered in any way (any of the four components), it will not be accepted as a true.

== Usage

First block (MACHINE PROPERTIES) needs to be filled with the parameters corresponding to the machine in question. Components computed from earlier elements (e.g. `det_per_ring`) do not need to be filled (only `gate_main.m`).

The second block (titled "GATE SPECIFIC SETTINGS") allows the user to specify which elements to extract by setting the appropriate options-value to true (or 1).

Setting `options.obtain_trues = true` causes automatic extraction of trues. You can also (optionally) choose to reconstruct the trues instead of the actual coincidences. This is done by setting `options.reconstruct_trues = true`.

`options.store_scatter = true` allows the storing of scatter. However, in order to store scatter at least one element in the next vector needs to be 1. `options.scatter_components` stores the different scatter components as mentioned in introduction. The first one is Compton scattering in the phantom, second Compton scattering in the detector, this Rayleigh scattering in the phantom and fourth Rayleigh scattering in the detector. E.g. setting `options.scatter_components = [1 0 1 0]` stores only the Compton and Rayleigh scattering in the phantom, while scatter in the detectors will be ignored and not included either in the scatter data or trues. As with true data, you can optionally choose to reconstruct the scatter data by setting `options.reconstruct_scatter = true`. Only one of trues, scatter or coincidences can be reconstructed at the same time. 

Randoms can be obtained by putting `options.store_randoms = true`. The randoms obtained like this will not be used for randoms correction if it is selected. Both the actual randoms and delayed coincidences (if selected in GATE) can be extracted at the same time and in separate variables.

The "true" image can be optionally stored as well by putting `options.source = true`. This will create a separate mat-file named `machine_name '_Ideal_image_coordinates_' name '_ASCII.mat'`, where `machine_name` is the name of the machine you've specified and `name` the name of the examination you've specified. The last elements of `C` contains the trues (e.g. `C{end}`), `RA` contains randoms and `SC` scatter. Randoms and scatter are stored as singles in the true images.

Only ONE of the below output data can be used at a time (e.g. you cannot extract both LMF and ASCII data at the same time).

If you intent to form sinograms as well, the SINOGRAM PROPERTIES block also needs to be filled with correct values.

=== Using ASCII data

In order to extract scatter, randoms and/or trues from ASCII data you need to set `options.use_ASCII = true` in the ASCII DATA FORMAT SETTINGS block. Additionally you need to copy-paste the ASCII coincidence mask used in your macro. E.g. if `/gate/output/ascii/setCoincidenceMask 0 1 0 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0` then `options.coincidence_mask = [0 1 0 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0];`.

If you are extracting trues, then ALL the scatter components need to be selected in the GATE coincidence mask before running the simulation.

The location of the ASCII .dat files is specified by `options.fpath` in MISC PROPERTIES. Alternatively, the current working directory in MATLAB can be used as well.

=== Using LMF data

Set `options.use_LMF = true` and specify the number of bytes in the LMF header and in each event packet. Additionally, specify the number of bits dedicated for each detector element (R-sectors, modules, submodules, crystals, layers, shown when the simulation starts in GATE) and the coincidence window. Lastly the clock time step shown in cch-files is needed.

The location of the LMF .ccs files is specified by `options.fpath` in MISC PROPERTIES. Alternatively, the current working directory in MATLAB can be used as well.

You need to run `install_mex` before LMF support is available.

NOTE: The source image can be unreliable with LMF data.

=== Using ROOT data

Simply set `options.use_root = true`. The location of the ROOT .root files is specified by `options.fpath` in MISC PROPERTIES. Alternatively, the current working directory in MATLAB can be used as well.

You need to run `install_mex` before ROOT support is available (Linux only). If `thisroot.sh/csh` has been sourced, ROOT should be found automatically. Otherwise you can input the ROOT path with `install_mex(0, [], [], [], '/PATH/TO/ROOT')`.

NOTE: Using ROOT data, as mentioned in https://github.com/villekf/OMEGA/blob/master/README.md[readme], will cause MATLAB R2018b and EARLIER to crash during GUI activity. This can be prevented by using MATLAB in the -nojvm mode (i.e. `matlab -nojvm`), which means without any GUIs. It is recommended to use this only for data extraction (set `options.only_sinos = true` and run `gate_main_simple.m`). This issue is not present on Octave or MATLAB R2019a and up. ROOT is not supported on Windows on either MATLAB or Octave. 

=== Loading and saving data

The actual data load happens when the third section of gate_main.m is run. You need to run the first section before the third one will work. This will save the measurement data in a raw form where the coincidences are saved between all the unique possible detector pairs (LORs) in vector form. E.g. The first element of this vector contains coincidences between detectors 1 and 1 (not actually possible), second between 1 and 2 (also 2 and 1, e.g. reversed), third 1 and 3, etc. There are produced separately for the all the selected elements (random, true, scattered, coincidences and delayed coincidences) and saved in a mat-file (contains the word *raw*). The raw data is always stored in cell-arrays, even if static examination is performed. Source images (if selected) are saved in a separate mat-file.

Sinograms can be formed of all the above data by running the next section. All the sinograms are saved in mat-file. `raw_SinM` contains the coincidences with no corrections, `SinM` contains the corrected coincidences (if any were selected), `SinDelayed` contains the delayed coincidences, `SinScatter` contains scatter, `SinTrues` trues and `SinRandoms` randoms. These will be cell-files if a dynamic examination is performed.

=== Reconstruction

If you wish to reconstruct any data, run the next section (Reconstructions). The selected data (trues, scatter, coincidences [default]) will be automatically selected.

If you want to reconstruct e.g. trues + Compton scatter in phantom, you should load the saved sinogram/raw data and sum the trues and Compton scatter together (i.e. if `options.scatter_components = [1 0 0 0]` then `SinScatter` contains only the Compton scatter in phantom and you can perform them reconstructions with the following code `options.SinM = SinTrues + SinScatter`). If `options.SinM` already exists, it will not be loaded from the saved mat-files. That way you can input any data combinations, but unless you want exclusively trues or scatter, they need to be performed manually now. The same applies to raw data, but instead of `options.SinM` use `options.coincidences`. 

Currently the user also has to individually extract each scatter component (i.e. you can't extract Compton scatter in phantom or in detector simultaneously in separate variables/data files, but rather need to extract each component on its own and rename the output data accordingly).